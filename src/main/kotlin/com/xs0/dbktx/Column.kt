package com.xs0.dbktx

import com.xs0.dbktx.sqltypes.SqlType
import com.xs0.dbktx.sqltypes.SqlTypeVarchar

sealed class Column<E: DbEntity<E, *>, T : Any>(
        val table: DbTable<E, *>,
        private val getter: (E) -> T?,
        val fieldName: String,
        val sqlType: SqlType<T>,
        val indexInRow: Int) : RowProp<E, T> {

    override fun from(row: List<Any?>): T? {
        val value = row[indexInRow] ?: return null

        return sqlType.fromJson(value)
    }

    override val isAutoGenerated: Boolean
        get() = sqlType.isAutoGenerated

    override fun isSet(values: EntityValues<E>): Boolean {
        return values.contains(this)
    }

    override fun toSql(sb: SqlBuilder, topLevel: Boolean) {
        sb.name(this)
    }

    override fun makeLiteral(value: T): Expr<E, T> {
        return Literal(value, sqlType)
    }

    open operator fun invoke(entity: E): T? {
        return getter(entity)
    }
}

class NonNullSimpleColumn<E : DbEntity<E, *>, T : Any>(
        table: DbTable<E, *>,
        private val getter: (E) -> T,
        fieldName: String,
        sqlType: SqlType<T>,
        indexInRow: Int) : Column<E, T>(table, getter, fieldName, sqlType, indexInRow),
                           NonNullRowProp<E, T>  {

    override fun from(row: List<Any?>): T {
        val value = row[indexInRow] ?: throw IllegalStateException("Null value for NOT NULL column $fieldName")

        return sqlType.fromJson(value)
    }

    override operator fun invoke(entity: E): T {
        return getter(entity)
    }
}

class NullableSimpleColumn<E : DbEntity<E, *>, T : Any>(
        table: DbTable<E, *>,
        getter: (E) -> T?,
        fieldName: String,
        sqlType: SqlType<T>,
        indexInRow: Int)

    : Column<E, T>(table, getter, fieldName, sqlType, indexInRow),
      NullableRowProp<E, T>



sealed class MultiValuedColumn<E : DbEntity<E, *>, T : Any>(
        table: DbTable<E, *>,
        getter: (E) -> T?,
        fieldName: String,
        sqlType: SqlType<T>,
        indexInRow: Int)

    : Column<E, T>(table, getter, fieldName, sqlType, indexInRow),
      MultiValuedProp<E, T>

class NonNullMultiValuedColumn<E : DbEntity<E, *>, T : Any>(
        table: DbTable<E, *>,
        private val getter: (E) -> T,
        fieldName: String,
        sqlType: SqlType<T>,
        indexInRow: Int)

    : MultiValuedColumn<E, T>(table, getter, fieldName, sqlType, indexInRow),
        MultiValuedProp<E, T> {


    override fun from(row: List<Any?>): T? {
        val value = row[indexInRow] ?: throw IllegalStateException("Null value for NOT NULL column $fieldName")

        return sqlType.fromJson(value)
    }

    override operator fun invoke(entity: E): T {
        return getter(entity)
    }
}

class NullableMultiValuedColumn<E : DbEntity<E, *>, T : Any>(
        table: DbTable<E, *>,
        getter: (E) -> T?,
        fieldName: String,
        sqlType: SqlType<T>,
        indexInRow: Int)

    : MultiValuedColumn<E, T>(table, getter, fieldName, sqlType, indexInRow),
      NullableRowProp<E, T>




sealed class OrderedColumn<E : DbEntity<E, *>, T : Any>(
        table: DbTable<E, *>,
        getter: (E) -> T?,
        fieldName: String,
        sqlType: SqlType<T>,
        indexInRow: Int)

    : MultiValuedColumn<E, T>(table, getter, fieldName, sqlType, indexInRow),
      OrderedProp<E, T>

open class NonNullOrderedColumn<E : DbEntity<E, *>, T : Any>(
        table: DbTable<E, *>,
        private val getter: (E) -> T,
        fieldName: String,
        sqlType: SqlType<T>,
        indexInRow: Int)

    : MultiValuedColumn<E, T>(table, getter, fieldName, sqlType, indexInRow),
      OrderedProp<E, T> {


    override fun from(row: List<Any?>): T? {
        val value = row[indexInRow] ?: throw IllegalStateException("Null value for NOT NULL column $fieldName")

        return sqlType.fromJson(value)
    }

    override operator fun invoke(entity: E): T {
        return getter(entity)
    }
}

open class NullableOrderedColumn<E : DbEntity<E, *>, T : Any>(
        table: DbTable<E, *>,
        getter: (E) -> T?,
        fieldName: String,
        sqlType: SqlType<T>,
        indexInRow: Int)

    : OrderedColumn<E, T>(table, getter, fieldName, sqlType, indexInRow),
      OrderedProp<E, T>


class NonNullStringColumn<E : DbEntity<E, *>>(
        table: DbTable<E, *>,
        getter: (E) -> String,
        fieldName: String,
        sqlType: SqlType<String>,
        indexInRow: Int)

    : NonNullOrderedColumn<E, String>(table, getter, fieldName, sqlType, indexInRow),
      ExprString<E>

class NullableStringColumn<E : DbEntity<E, *>>(
        table: DbTable<E, *>,
        getter: (E) -> String?,
        fieldName: String,
        sqlType: SqlType<String>,
        indexInRow: Int)
    : NullableOrderedColumn<E, String>(table, getter, fieldName, sqlType, indexInRow),
      ExprString<E>





class SColumn<E : DbEntity<E, *>>(table: DbTable<E, *>, getter: (E) -> String, dbName: String, sqlType: SqlType<String>, indexInRow: Int) : Column<E, String>(table, getter, dbName, sqlType, indexInRow), ExprString<E> {


}