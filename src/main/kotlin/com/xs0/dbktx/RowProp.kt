package com.xs0.dbktx

import java.util.HashSet

abstract class RowProp<E : DbEntity<E, *>, TYPE> protected constructor(val table: DbTable<E, *>, val dbName: String) : Expr<E, TYPE> {
    abstract fun from(row: List<Any?>): TYPE?

    abstract infix fun eq(value: TYPE): ExprBoolean<E>
    abstract infix fun neq(value: TYPE): ExprBoolean<E>
    abstract infix fun oneOf(values: Set<TYPE>): ExprBoolean<E>

    fun oneOf(values: Iterable<TYPE>): ExprBoolean<E> {
        if (values is Set<*>) {
            return oneOf(values as Set<TYPE>)
        } else if (values is Collection<*>) {
            return oneOf(HashSet(values as Collection<TYPE>))
        } else {
            val set = HashSet<TYPE>()
            for (value in values)
                set.add(value)
            return oneOf(set)
        }
    }

    override fun toSql(sb: SqlBuilder, topLevel: Boolean) {
        sb.sql(dbName)
    }

    abstract val isAutoGenerated: Boolean
    abstract fun isSet(values: Map<Column<E, *>, Expr<in E, *>>): Boolean
}
