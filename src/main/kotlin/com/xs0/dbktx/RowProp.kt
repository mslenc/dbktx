package com.xs0.dbktx

import java.util.HashSet

interface RowProp<E : DbEntity<E, *>, T> : Expr<E, T> {
    fun from(row: List<Any?>): T?

    val isAutoGenerated: Boolean
    fun isSet(values: EntityValues<E>): Boolean
    fun makeLiteral(value: T): Expr<in E, T>

    infix fun eq(value: T): ExprBoolean<E> = eq(makeLiteral(value))
    infix fun neq(value: T): ExprBoolean<E> = neq(makeLiteral(value))
}

interface NullableRowProp<E: DbEntity<E, *>, T> : RowProp<E, T>, NullableExpr<E, T>

interface NonNullRowProp<E: DbEntity<E, *>, T> : RowProp<E, T> {
    override fun from(row: List<Any?>): T
}

interface MultiValuedProp<E : DbEntity<E, *>, T> : RowProp<E, T>, MultiValuedExpr<E, T> {
    infix fun oneOf(values: Set<T>): ExprBoolean<E> = oneOf(values.map { makeLiteral(it) })

    infix fun oneOf(values: Iterable<T>): ExprBoolean<E> {
        if (values is Set<*>) {
            return oneOf(values as Set<T>)
        } else if (values is Collection<*>) {
            return oneOf(HashSet(values as Collection<T>))
        } else {
            val set = HashSet<T>()
            set += values
            return oneOf(set)
        }
    }
}

interface OrderedProp<E : DbEntity<E, *>, T> : MultiValuedProp<E, T>, OrderedExpr<E, T> {
    infix fun lt(value: T): ExprBoolean<E> = lt(makeLiteral(value))
    infix fun lte(value: T): ExprBoolean<E> = lte(makeLiteral(value))
    infix fun gt(value: T): ExprBoolean<E> = gt(makeLiteral(value))
    infix fun gte(value: T): ExprBoolean<E> = gte(makeLiteral(value))
}
