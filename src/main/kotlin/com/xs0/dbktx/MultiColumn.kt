package com.xs0.dbktx

import com.xs0.dbktx.composite.CompositeId

private fun buildFieldTuple(id: CompositeId<*, *>): String {
    val sb = StringBuilder()
    for (i in 0 until id.numColumns) {
        sb.append(if (i == 0) "(" else ", ")
        sb.append(id.getColumn(i).fieldName)
    }
    return sb.append(")").toString()
}

class MultiColumn<E : DbEntity<E, ID>, ID : CompositeId<E, ID>>(
        private val constructor: (List<Any?>) -> ID,
        private val prototype: ID) : NonNullRowProp<E, ID>, CompositeExpr<E, ID> {

    override val numParts: Int
        get() = prototype.numColumns

    private val fieldTuple by lazy { buildFieldTuple(prototype) }

    override fun toSql(sb: SqlBuilder, topLevel: Boolean) {
        sb.sql(fieldTuple)
    }

    override fun makeLiteral(value: ID): Expr<E, ID> {
        return value
    }

    override fun getPart(index: Int): Column<E, *> {
        return prototype.getColumn(index)
    }

    override fun eq(value: ID): ExprBoolean<E> {
        return ExprBinary(this, ExprBinary.Op.EQ, value)
    }

    override fun neq(value: ID): ExprBoolean<E> {
        return ExprBinary(this, ExprBinary.Op.NEQ, value)
    }

    override fun oneOf(values: Set<ID>): ExprBoolean<E> {
        return ExprOneOf.oneOf(this, ArrayList(values))
    }

    override fun from(row: List<Any?>): ID {
        return constructor(row)
    }

    override val isAutoGenerated: Boolean
        get() = false

    override fun extract(values: EntityValues<E>): ID? {
        val numCols = prototype.tableMetainfo.numColumns;

        val row = ArrayList<Any?>(numCols)
        for (i in 0 until numCols)
            row.add(null)

        for (i in 0 until numParts) {
            val part = getPart(i)
            val value = part.extract(values) ?: return null
            row[part.indexInRow] = value
        }

        return from(row)
    }
}