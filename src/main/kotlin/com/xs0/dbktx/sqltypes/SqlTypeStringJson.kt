package com.xs0.dbktx.sqltypes

import com.xs0.dbktx.util.JSON
import com.xs0.dbktx.util.Sql
import kotlin.reflect.KClass

class SqlTypeStringJson<T: Any>(
        private val concreteType: SqlTypeKind,
        override val kotlinType: KClass<T>,
        override val dummyValue: T,
        isNotNull: Boolean)

    : SqlType<T>(isNotNull = isNotNull, isAutoGenerated = false) {

    init {
        // TODO: check concreteType is varchar/text, maximum length, etc..
    }

    override fun fromJson(value: Any): T {
        if (value !is CharSequence)
            throw IllegalStateException("Not a string value: " + value.javaClass)

        return JSON.parse(value.toString(), kotlinType)
    }

    override fun toJson(value: T): String {
        return JSON.stringify(value)
    }

    override fun toSql(value: T, sql: Sql) {
        sql(toJson(value))
    }
}
