package com.github.mslenc.dbktx.sqltypes

import com.github.mslenc.asyncdb.common.ULong
import com.github.mslenc.dbktx.util.Sql
import kotlin.reflect.KClass

class SqlTypeULong(
        private val concreteType: SqlTypeKind,
        isNotNull: Boolean,
        isAutoGenerated: Boolean,
        isUnsigned: Boolean)

    : SqlTypeNumeric<ULong>(isNotNull = isNotNull,
                            isAutoGenerated = isAutoGenerated,
                            isUnsigned = isUnsigned) {

    init {
        if (!isUnsigned)
            throw IllegalArgumentException("Only use ULong for unsigned columns")

        when (concreteType) {
            SqlTypeKind.TINYINT,
            SqlTypeKind.SMALLINT,
            SqlTypeKind.MEDIUMINT,
            SqlTypeKind.INT,
            SqlTypeKind.BIGINT -> {
                // ok
            }

            else ->
                throw IllegalArgumentException("Unsupported type $concreteType")
        }
    }

    override fun parseRowDataValue(value: Any): ULong {
        if (value is ULong)
            return value

        if (value is Number)
            return ULong.valueOf(value.toLong())

        throw IllegalArgumentException("Not a long - $value")
    }

    override fun encodeForJson(value: ULong): Any {
        return value.toString()
    }

    override fun decodeFromJson(value: Any): ULong {
        return ULong.parseULong(value.toString())
    }

    override fun toSql(value: ULong, sql: Sql) {
        sql(value)
    }

    override val dummyValue: ULong = ULong.valueOf(125)

    override val kotlinType: KClass<ULong> = ULong::class
}