package com.github.mslenc.dbktx.sqltypes

import com.github.mslenc.asyncdb.DbValue
import com.github.mslenc.asyncdb.impl.values.DbValueString
import com.github.mslenc.dbktx.util.JSON
import com.github.mslenc.dbktx.util.Sql
import kotlin.reflect.KClass

class SqlTypeStringJson<T: Any>(
        private val concreteType: SqlTypeKind,
        override val kotlinType: KClass<T>,
        override val zeroValue: T,
        isNotNull: Boolean)

    : SqlType<T>(isNotNull = isNotNull, isAutoGenerated = false) {

    init {
        // TODO: check concreteType is varchar/text, maximum length, etc..
    }

    override fun parseDbValue(value: DbValue): T {
        return JSON.parse(value.asString(), kotlinType)
    }

    override fun makeDbValue(value: T): DbValue {
        return DbValueString(JSON.stringify(value))
    }

    override fun encodeForJson(value: T): Any {
        return JSON.stringify(value)
    }

    override fun decodeFromJson(value: Any): T {
        if (value is String)
            return JSON.parse(value, kotlinType)

        throw IllegalArgumentException("Not a string: $value")
    }

    override fun toSql(value: T, sql: Sql) {
        sql(JSON.stringify(value))
    }
}
