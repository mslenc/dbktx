package com.github.mslenc.dbktx.sqltypes

import com.github.mslenc.dbktx.util.JSON
import com.github.mslenc.dbktx.util.Sql
import kotlin.reflect.KClass
import kotlin.reflect.full.cast

class SqlTypeStringJson<T: Any>(
        private val concreteType: SqlTypeKind,
        override val kotlinType: KClass<T>,
        override val dummyValue: T,
        isNotNull: Boolean)

    : SqlType<T>(isNotNull = isNotNull, isAutoGenerated = false) {

    init {
        // TODO: check concreteType is varchar/text, maximum length, etc..
    }

    override fun parseRowDataValue(value: Any): T {
        if (kotlinType.isInstance(value))
            return kotlinType.cast(value)

        if (value is CharSequence)
            return JSON.parse(value.toString(), kotlinType)

        throw IllegalStateException("Expected a string (JSON) value: " + value.javaClass)
    }

    override fun encodeForJson(value: T): Any {
        return JSON.stringify(value)
    }

    override fun decodeFromJson(value: Any): T {
        return parseRowDataValue(value)
    }

    override fun toSql(value: T, sql: Sql) {
        sql(JSON.stringify(value))
    }
}
