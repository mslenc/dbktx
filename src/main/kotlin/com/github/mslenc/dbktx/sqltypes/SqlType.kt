package com.github.mslenc.dbktx.sqltypes

import com.github.mslenc.asyncdb.DbValue
import com.github.mslenc.dbktx.util.Sql
import kotlin.reflect.KClass

abstract class SqlType<T : Any> protected constructor(val isNotNull: Boolean, val isAutoGenerated: Boolean = false) {
    /**
     * Parses the value as returned from DB (see asyncdb type mapping to know what to expect).
     */
    abstract fun parseDbValue(value: DbValue): T

    /**
     * Returns whether the value is logically null. Default implementation returns true only for
     * the actual SQL null, but in some cases, a 0 or something similar represents the same.
     */
    open fun isNullDbValue(value: DbValue): Boolean {
        return value.isNull
    }

    /**
     * Encodes the value for use in JSON. In particular, the value should be a String, a Number or a Boolean.
     */
    abstract fun encodeForJson(value: T): Any

    /**
     * Parses the JSON value encoded with encodeForJson.
     */
    abstract fun decodeFromJson(value: Any): T

    /**
     * A dummy value of the appropriate type. Used internally for various shenanigans.
     */
    internal abstract val dummyValue: T

    /**
     * The class T
     */
    abstract val kotlinType: KClass<T>

    /**
     * Encodes the value into SQL. Should generally do the opposite of parseDbValue.
     */
    abstract fun toSql(value: T, sql: Sql)

    /**
     * Encodes the value into DbValue. Should generally do the opposite of parseDbValue.
     */
    abstract fun makeDbValue(value: T): DbValue

    /**
     * Encodes a null value into SQL, useful as the opposite of isNullDbValue.
     */
    open fun toSqlNull(sql: Sql) {
        sql.raw("NULL")
    }
}

