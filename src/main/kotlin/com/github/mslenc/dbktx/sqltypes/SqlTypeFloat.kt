package com.github.mslenc.dbktx.sqltypes

import com.github.mslenc.asyncdb.DbValue
import com.github.mslenc.asyncdb.impl.values.DbValueFloat
import com.github.mslenc.dbktx.util.Sql
import kotlin.reflect.KClass

class SqlTypeFloat(concreteType: SqlTypeKind,
                   isNotNull: Boolean,
                   isUnsigned: Boolean) : SqlTypeNumeric<Float>(isNotNull = isNotNull, isAutoGenerated = false, isUnsigned = isUnsigned) {
    init {
        if (concreteType != SqlTypeKind.FLOAT)
            throw IllegalArgumentException("Unsupported type $concreteType")
    }

    override fun parseDbValue(value: DbValue): Float {
        return value.asFloat()
    }

    override fun makeDbValue(value: Float): DbValue {
        return DbValueFloat(value)
    }

    override fun encodeForJson(value: Float): Any {
        return value
    }

    override fun decodeFromJson(value: Any): Float {
        if (value is Number)
            return value.toFloat()

        throw IllegalArgumentException("Not a number: $value")
    }

    override fun toSql(value: Float, sql: Sql) {
        sql(value)
    }

    override val zeroValue: Float = 0.0f

    override val kotlinType: KClass<Float> = Float::class
}