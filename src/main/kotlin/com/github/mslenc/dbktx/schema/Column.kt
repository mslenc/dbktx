package com.github.mslenc.dbktx.schema

import com.github.mslenc.asyncdb.DbRow
import com.github.mslenc.asyncdb.DbValue
import com.github.mslenc.dbktx.crud.BoundColumnForSelect
import com.github.mslenc.dbktx.expr.Expr
import com.github.mslenc.dbktx.expr.Literal
import com.github.mslenc.dbktx.sqltypes.SqlType
import com.github.mslenc.dbktx.crud.EntityValues
import com.github.mslenc.dbktx.crud.TableInQuery
import com.github.mslenc.dbktx.expr.FilterExpr
import com.github.mslenc.dbktx.filters.FilterIsNull
import com.github.mslenc.dbktx.util.Sql

interface Column<E: DbEntity<E, *>, T : Any> : RowProp<E, T> {
    val table: DbTable<E, *>
    val fieldName: String
    val quotedFieldName: String
    val sqlType: SqlType<T>
    val indexInRow: Int
    val nonNull: Boolean
    val nullable: Boolean get() = !nonNull

    override operator fun invoke(row: DbRow): T? {
        val value = row.getValue(indexInRow)

        if (value.isNull)
            return null

        return sqlType.parseDbValue(value)
    }

    override val isAutoGenerated: Boolean
        get() = sqlType.isAutoGenerated

    override fun extract(values: EntityValues<E>): T? {
        return values.getValue(this)
    }

    override fun makeLiteral(value: T): Expr<T> {
        return Literal(value, sqlType)
    }

    fun makeDbValue(value: T): DbValue {
        return sqlType.makeDbValue(value)
    }

    operator fun invoke(entity: E): T?

    override fun bindForSelect(tableInQuery: TableInQuery<E>): BoundColumnForSelect<E, T>
}

interface NonNullColumn<E: DbEntity<E, *>, T: Any>: Column<E, T>, NonNullRowProp<E, T> {
    override fun invoke(row: DbRow): T {
        val value = row.getValue(indexInRow)

        if (value.isNull)
            throw IllegalStateException("Null value for NOT NULL column $fieldName")

        return sqlType.parseDbValue(value)
    }

    override operator fun invoke(entity: E): T
}

interface NullableColumn<E: DbEntity<E, *>, T: Any>: Column<E, T>, NullableRowProp<E, T>




abstract class ColumnImpl<E : DbEntity<E, *>, T: Any>(
        final override val table: DbTable<E, *>,
        private val getter: (E) -> T?,
        final override val fieldName: String,
        final override val sqlType: SqlType<T>,
        final override val indexInRow: Int)

    : Column<E, T> {

    final override val quotedFieldName = Sql.quoteIdentifier(fieldName)

    override fun invoke(entity: E): T? {
        return getter(entity)
    }

    override fun bindForSelect(tableInQuery: TableInQuery<E>): BoundColumnForSelect<E, T> {
        return BoundColumnForSelect(this, tableInQuery)
    }
}

class NonNullColumnImpl<E : DbEntity<E, *>, T: Any>(
        table: DbTable<E, *>,
        private val getter: (E) -> T,
        fieldName: String,
        sqlType: SqlType<T>,
        indexInRow: Int)

    : ColumnImpl<E, T>(table, getter, fieldName, sqlType, indexInRow),
        NonNullColumn<E, T> {

    override val nonNull get() = true

    override fun invoke(entity: E): T {
        return getter(entity)
    }
}

open class NullableColumnImpl<E : DbEntity<E, *>, T: Any>(
        table: DbTable<E, *>,
        getter: (E) -> T?,
        fieldName: String,
        sqlType: SqlType<T>,
        indexInRow: Int)

    : ColumnImpl<E, T>(table, getter, fieldName, sqlType, indexInRow),
        NullableColumn<E, T> {

    override val nonNull get() = false

    override fun makeIsNullExpr(currentTable: TableInQuery<E>, isNull: Boolean): FilterExpr {
        return FilterIsNull(bindForSelect(currentTable), isNull)
    }
}